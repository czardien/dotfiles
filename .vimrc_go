source ~/.vimrc

" ================================
" Color schemes action right there

" set background=dark
" colorscheme solarized

" colorscheme zenburn

let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai
" ================================


" VIM-GO magic
" Make it easier to jump between errors in quickfix list
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" Build and run a Go program with <leader>b and <leader>r
autocmd FileType go nmap <leader>r  <Plug>(go-run)

" Make all list of type quickfix
let g:go_list_type = "quickfix"

" Run go tests with <leader>t
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

" Run :GoCoverageToggle with <leader>c
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" Goimports will automatically format and also rewrite your import declarations
" CAN BE LONG ON LARGE CODEBASE
let g:go_fmt_command = "goimports"

" Use :A to open alternate file
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')

" By the way use K to call :GoDoc

" Print the function signature in the status line with <leader>i
autocmd FileType go nmap <Leader>i <Plug>(go-info)

" Automatically show the information whenever you move your cursor every 100ms
" THIS IS BUGGY
" set updatetime=100
" let g:go_auto_type_info = 1

" MIGHT BE TOO MUCH; automatically highlight matching identifiers
" let g:go_auto_sameids = 1

" Hightlighting functions
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1

" For making enter inserting a newline
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>
